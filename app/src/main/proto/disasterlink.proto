syntax = "proto3";

package disasterlink;

// Generated Java/Kotlin classes will be placed under this package.
option java_package = "com.example.disasterlink.proto";
option java_multiple_files = true;

// Root wrapper for all DisasterLink BLE payloads.
// Used so a single BLE characteristic can carry different types of messages.
message DisasterLinkPacket {
  oneof payload {
    DeviceStatus status        = 1;
    Message message            = 2;
    NetworkInfo network_info   = 3;
  }
}

// ------------------------ DEVICE STATUS ------------------------
// Maps to the Device Status Characteristic UUID in UuidConstants.
message DeviceStatus {
  // Globally unique identifier for the device (UUID string).
  string device_id = 1;

  // Battery percentage, valid range 0â€“100.
  // Application layer must enforce the range.
  uint32 battery_level = 2;

  // Current role of this device in the network.
  enum Role {
    ROLE_UNSPECIFIED = 0; // Unknown or unset role.
    ENDPOINT         = 1; // A standard node, not actively relaying.
    RELAY            = 2; // A node actively relaying messages.
  }
  Role current_role = 3;

  // Reserved field numbers for future expansion.
  reserved 10 to 19;
}

// ------------------------ MESSAGE EXCHANGE ------------------------
// Maps to the Message Exchange Characteristic UUID in UuidConstants.
message Message {
  // Unique ID for this message (UUID string).
  string message_id = 1;

  // Device ID of the original sender.
  string source_id = 2;

  // Target device ID, or literal "BROADCAST" for broadcast delivery.
  string destination_id = 3;

  // UTC timestamp of message creation in milliseconds since epoch.
  int64 timestamp_ms = 4;

  // Time-To-Live hop count for loop prevention.
  // Must be >= 0; decremented at each relay.
  uint32 ttl = 5;

  // Actual message payload (e.g., encrypted or plain text).
  // Keep size small for BLE; consider compression if large.
  bytes content = 6;

  reserved 10 to 19;
}

// ------------------------ NETWORK INFORMATION ------------------------
// Maps to the Network Information Characteristic UUID in UuidConstants.
message NetworkInfo {
  // Device ID of the reporting node.
  string device_id = 1;

  // List of directly connected neighbors.
  repeated Neighbor neighbors = 2;

  reserved 10 to 19;
}

// Details about a neighboring device.
message Neighbor {
  // Neighbor device ID.
  string device_id = 1;

  // Last known signal strength to this neighbor in dBm.
  // Negative values are expected (e.g., -60).
  sint32 rssi = 2;

  reserved 10 to 19;
}
